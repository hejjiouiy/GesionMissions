"""initial clean schema

Revision ID: 42710918889b
Revises: 
Create Date: 2025-04-23 14:24:31.034837

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import text


# revision identifiers, used by Alembic.
revision: str = '42710918889b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def create_enum_if_not_exists(enum_name, values, schema=None):
    """Create an enum type if it doesn't already exist."""
    conn = op.get_bind()

    # Check if the enum type already exists
    schema_clause = f"AND n.nspname = '{schema}'" if schema else ""
    query = text(
        f"""
        SELECT 1 FROM pg_type t 
        JOIN pg_namespace n ON n.oid = t.typnamespace 
        WHERE t.typname = '{enum_name}' {schema_clause}
        """
    )
    result = conn.execute(query).scalar()

    if not result:
        # Create the enum values as a string
        enum_values_str = ", ".join(f"'{val}'" for val in values)

        # Create the enum
        schema_prefix = f"{schema}." if schema else ""
        conn.execute(text(f"CREATE TYPE {schema_prefix}{enum_name} AS ENUM ({enum_values_str})"))
        return True
    return False


def create_table_if_not_exists(table_name, schema=None):
    """Check if a table exists before creating it."""
    conn = op.get_bind()

    # Check if the table already exists
    schema_clause = f"AND table_schema = '{schema}'" if schema else ""
    query = text(
        f"""
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = '{table_name}' {schema_clause}
        """
    )
    return conn.execute(query).scalar() is not None



def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Create schema if it doesn't exist (prevents errors if schema doesn't exist)
    op.execute('CREATE SCHEMA IF NOT EXISTS gestion_missions')
    if not create_table_if_not_exists('ligne_budgetaire', 'gestion_missions'):
        op.create_table('ligne_budgetaire',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('codeLigne', sa.String(), nullable=False),
        sa.Column('nom', sa.String(), nullable=False),
        sa.Column('exerciceBudgetaire', sa.INTEGER(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        schema='gestion_missions'
        )
        # Create type_mission enum if it doesn't exist
    create_enum_if_not_exists(
        'typemission',
        ['NATIONALE', 'INTERNATIONALE'],
        schema='gestion_missions'
    )

    if not create_table_if_not_exists('missions', 'gestion_missions'):
        op.create_table('missions',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('type', postgresql.ENUM('NATIONALE', 'INTERNATIONALE', name='typemission', schema='gestion_missions', create_type=False), nullable=True),
            sa.Column('destination', sa.String(), nullable=False),
            sa.Column('details', sa.String(), nullable=False),
            sa.Column('pays', sa.String(), nullable=False),
            sa.Column('ville', sa.String(), nullable=False),
            sa.Column('budgetPrevu', sa.Float(), nullable=False),
            sa.Column('createdAt', sa.DateTime(), nullable=True),
            sa.Column('updatedAt', sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint('id'),
            schema='gestion_missions'
        )

    create_enum_if_not_exists(
        'etatmission',
        ['OUVERTE', 'EN_ATTENTE', 'VALIDEE_HIERARCHIQUEMENT', 'VALIDEE_BUDGETAIREMENT', 'APPROUVEE', 'REFUSEE'],
        schema='gestion_missions'
    )


    create_enum_if_not_exists(
        'typefinancement',
        ['PERSONNEL', 'PARRAINAGE', 'INTERNE'],
        schema='gestion_missions'
    )

    if not create_table_if_not_exists('ordres_mission', 'gestion_missions'):
        op.create_table('ordres_mission',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('accord_respo', sa.LargeBinary(), nullable=False),
            sa.Column('dateDebut', sa.Date(), nullable=True),
            sa.Column('dateFin', sa.Date(), nullable=True),
            sa.Column('etat', postgresql.ENUM('OUVERTE', 'EN_ATTENTE', 'VALIDEE_HIERARCHIQUEMENT',
                                              'VALIDEE_BUDGETAIREMENT', 'APPROUVEE', 'REFUSEE',
                                              name='etatmission', schema='gestion_missions', create_type=False),
                      nullable=True),
            sa.Column('createdAt', sa.DateTime(), nullable=True),
            sa.Column('updatedAt', sa.DateTime(), nullable=True),
            sa.Column('user_id', sa.UUID(), nullable=True),
            sa.Column('mission_id', sa.UUID(), nullable=True),
            sa.ForeignKeyConstraint(['mission_id'], ['gestion_missions.missions.id'], ),
            sa.PrimaryKeyConstraint('id'),
            schema='gestion_missions'
            )

    # Check if financement table exists before creating
    if not create_table_if_not_exists('financement', 'gestion_missions'):
        op.create_table('financement',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('type', postgresql.ENUM('PERSONNEL', 'PARRAINAGE', 'INTERNE', name='typefinancement', schema='gestion_missions', create_type=False), nullable=False),
            sa.Column('details', sa.String(), nullable=True),
            sa.Column('valide', sa.Boolean(), nullable=True),
            sa.Column('devise', sa.String(), nullable=True),
            sa.Column('createdAt', sa.DateTime(), nullable=True),
            sa.Column('updatedAt', sa.DateTime(), nullable=True),
            sa.Column('ordre_mission_id', sa.UUID(), nullable=True),
            sa.ForeignKeyConstraint(['ordre_mission_id'], ['gestion_missions.ordres_mission.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('ordre_mission_id'),
            schema='gestion_missions'
        )


    if not create_table_if_not_exists('heberegement', 'gestion_missions'):
        op.create_table('heberegement',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('dateDebut', sa.Date(), nullable=True),
            sa.Column('dateFin', sa.Date(), nullable=True),
            sa.Column('localisation', sa.String(), nullable=False),
            sa.Column('typeHebergement', sa.String(), nullable=False),
            sa.Column('ordre_mission_id', sa.UUID(), nullable=True),
            sa.ForeignKeyConstraint(['ordre_mission_id'], ['gestion_missions.ordres_mission.id'], ),
            sa.PrimaryKeyConstraint('id'),
            schema='gestion_missions'
        )


    if not create_table_if_not_exists('rapport_mission', 'gestion_missions'):
        op.create_table('rapport_mission',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('contenu', sa.String(), nullable=False),
            sa.Column('data', sa.LargeBinary(), nullable=True),
            sa.Column('createdAt', sa.DateTime(), nullable=True),
            sa.Column('updatedAt', sa.DateTime(), nullable=True),
            sa.Column('ordre_mission_id', sa.UUID(), nullable=True),
            sa.ForeignKeyConstraint(['ordre_mission_id'], ['gestion_missions.ordres_mission.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('ordre_mission_id'),
            schema='gestion_missions'
        )

    if not create_table_if_not_exists('voyage', 'gestion_missions'):
        op.create_table('voyage',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('destination', sa.String(), nullable=True),
            sa.Column('moyen', sa.String(), nullable=True),
            sa.Column('dateVoyage', sa.Date(), nullable=True),
            sa.Column('createdAt', sa.DateTime(), nullable=True),
            sa.Column('updatedAt', sa.DateTime(), nullable=True),
            sa.Column('ordre_mission_id', sa.UUID(), nullable=True),
            sa.ForeignKeyConstraint(['ordre_mission_id'], ['gestion_missions.ordres_mission.id'], ),
            sa.PrimaryKeyConstraint('id'),
            schema='gestion_missions'
        )
    if not create_table_if_not_exists('justificatif', 'gestion_missions'):
        op.create_table('justificatif',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('data', sa.LargeBinary(), nullable=False),
            sa.Column('createdAt', sa.DateTime(), nullable=True),
            sa.Column('modifiedAt', sa.DateTime(), nullable=True),
            sa.Column('financement_id', sa.UUID(), nullable=True),
            sa.ForeignKeyConstraint(['financement_id'], ['gestion_missions.financement.id'], ),
            sa.PrimaryKeyConstraint('id'),
            schema='gestion_missions'
        )

    if not create_table_if_not_exists('remboursement', 'gestion_missions'):
        op.create_table('remboursement',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('etat', postgresql.ENUM('OUVERTE', 'EN_ATTENTE', 'VALIDEE_HIERARCHIQUEMENT', 'VALIDEE_BUDGETAIREMENT', 'APPROUVEE', 'REFUSEE', name='etatmission', schema='gestion_missions', create_type=False), nullable=True),
            sa.Column('valide', sa.Boolean(), nullable=True),
            sa.Column('dateDemande', sa.Date(), nullable=True),
            sa.Column('createdAt', sa.DateTime(), nullable=True),
            sa.Column('updatedAt', sa.DateTime(), nullable=True),
            sa.Column('financement_id', sa.UUID(), nullable=True),
            sa.ForeignKeyConstraint(['financement_id'], ['gestion_missions.financement.id'], ),
            sa.PrimaryKeyConstraint('id'),
            schema='gestion_missions'
        )
        # Drop tables safely (check if they exist first)
    conn = op.get_bind()
    # ### end Alembic commands ###

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('remboursement', schema='gestion_missions')
    op.drop_table('justificatif', schema='gestion_missions')
    op.drop_table('voyage', schema='gestion_missions')
    op.drop_table('rapport_mission', schema='gestion_missions')
    op.drop_table('heberegement', schema='gestion_missions')
    op.drop_table('financement', schema='gestion_missions')
    op.drop_table('ordres_mission', schema='gestion_missions')
    op.drop_table('missions', schema='gestion_missions')
    op.drop_table('ligne_budgetaire', schema='gestion_missions')
    # ### end Alembic commands ###
