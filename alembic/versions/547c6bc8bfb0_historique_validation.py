"""historique validation

Revision ID: 547c6bc8bfb0
Revises: 66a3958554d8
Create Date: 2025-04-24 12:13:02.040642

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import text


# revision identifiers, used by Alembic.
revision: str = '547c6bc8bfb0'
down_revision: Union[str, None] = '66a3958554d8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def create_table_if_not_exists(table_name, schema=None):
    """Check if a table exists before creating it."""
    conn = op.get_bind()

    # Check if the table already exists
    schema_clause = f"AND table_schema = '{schema}'" if schema else ""
    query = text(
        f"""
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = '{table_name}' {schema_clause}
        """
    )
    return conn.execute(query).scalar() is not None

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    if not create_table_if_not_exists('ligne_budgetaire', 'gestion_missions'):
        op.create_table('historique_validation',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('ordre_mission_id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('role', sa.String(), nullable=False),
                    sa.Column('etat', postgresql.ENUM('OUVERTE', 'EN_ATTENTE', 'VALIDEE_HIERARCHIQUEMENT',
                                              'VALIDEE_BUDGETAIREMENT', 'APPROUVEE', 'REFUSEE',
                                              name='etatmission', schema='gestion_missions', create_type=False),
                              nullable=False),
                    sa.Column('timestamp', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['ordre_mission_id'], ['gestion_missions.ordres_mission.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    schema='gestion_missions'
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('historique_validation', schema='gestion_missions')
    # ### end Alembic commands ###
